

-----------------------------------------------
Introductoin to Java interface
-----------------------------------------------
An interface in Java is a set of unimplemented methods that a class can implement to emulate
the behavior of the inerface. Its a way to extend the behavior of a class.


There are some very common interfaces in real life.

1) Ligth Switch
2) Electric Plug
3) Fuel Tank nozzel
4) Phone keypad
5) Bank ATM


-----------------------------------------------
interface delcaration example
-----------------------------------------------

In this example we are creating an interface called "Scalar"
Any class that implements this interface can be increased
or decreased by a certian percentage.



public interface Scalar {
   
    public void decreaae( double pct );
    public void increase( double pct );
}


Some rules on interfaces 

(*) declare with the key word "interface"
(*) methods are only declared , can't be implemented
(*) methods must be public only !
(*) modifiers on methods private,protected and static NOT ALLOWED!
(*) may have a member variable that is "final" (e.g. initalized to some value)

-----------------------------------------------
Example use
-----------------------------------------------
For example we can use the interface concept on our Cirlce class

* a class "implements" an interface
* a class that implements an interface can assigned to a varaible
  of that interface type

  

public class DynamicCircle extends Shape implements Scalar {

       private double radius_;


       public DynamicCirlce( double r ) {
         radius_=r;
       }

       public String toString() {
         return new String( "Cirlce:radius="+radius_+":area="+area());
       }

       public double area() {
         return Math.PI * radius_ * radius_;
       }


       //------------------------------------------------
       // 
       //------------------------------------------------
       public void decrease( double pct ) {
         radius_ *= (1.0 - pct);
       }

       public void increase( double pct ) {
         radius_ *= (1.0 + pct);
       }

       //------------------------------------------------
       //
       //------------------------------------------------
       public static void scaleOut( Scalar s ) {
          for( double x = .1 ; x <= .5 ; x += .1 ) {
	    s.increse(x);
	    System.out.println(s.toString());	    
	  }
       }

       public satic void main( String [] args ) {
         DynamicCircle c = new Circle(2);
	 Scalar s = c; 
	 scaleOut(s);
       }
}

------------------------------------------------------------------------
Implementing Multiple Interfaces
------------------------------------------------------------------------

A class can "implement" multiple interfaces so if we had another interface
to we could implement too

For Example:

public interface Position {

       public void moveRight( int n );
       public void moveDown( int n );
}


The class declaration changes to implements Scalar,Position



public class DynamicCircle extends Shape implements Scalar, Position {

       private int rightMargin_;
       private int downMargin_;

       public void moveRight( int n ) {
         rightMargin_ += n;
       }

       public void moveDown( int n ) {
         downMargin_ += n;
       }

}











